plugins {
	id 'java'
	id 'java-library'
	id 'jacoco'
}

apply plugin: 'org.checkerframework'

final boolean deactivateCheckerFramework = false
final def fstv_version = '0.9.5'

logger.lifecycle "   -> Checker Framework is ${deactivateCheckerFramework ? 'DEACTIVATED!' : 'active.'}"
//logger.lifecycle "   -> Using common-filesystem-view version »${fstv_version}«"
logger.lifecycle "   -> Using common-filesystem-view internal snapshot (v${fstv_version})"

dependencies {
	implementation project (':lib-common-semver')
	implementation project (':lib-selectable-list-fx')
	
	//implementation "de.bernd_michaely:common-filesystem-view-base:${fstv_version}"
	//implementation "de.bernd_michaely:common-filesystem-view-fx:${fstv_version}"
	implementation project (':lib-filesystem-view-base')
	implementation project (':lib-filesystem-view-fx')
}
	
checkerFramework {
	checkers += 'org.checkerframework.checker.nullness.NullnessChecker'
	skipCheckerFramework = deactivateCheckerFramework
	excludeTests = true
}
	
testing {
	suites {
		test {
			useJUnitJupiter(versionJUnit)
		}
	}
}

tasks.named('test') {
	logger.lifecycle "=> Configuring task »${name}« for JUnit"
	systemProperty 'java.util.logging.config.file', rootProject.file('logging.properties')
	//logger.lifecycle "   -> JVM args : $jvmArgs"
}

jacocoTestReport {
	dependsOn test
	doLast {
		final File jacocoReportsDir = reports.html.outputLocation.asFile.get()
		final URL jacocoReportsUrl = new URL("file", null, "${jacocoReportsDir}/index.html")
		logger.lifecycle " -> JaCoCo reports in »${jacocoReportsUrl}«"
	}
}

javafx {
  //	modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.swing', 'javafx.web' ]
  modules = [ 'javafx.base', 'javafx.graphics', 'javafx.controls' ]
}
